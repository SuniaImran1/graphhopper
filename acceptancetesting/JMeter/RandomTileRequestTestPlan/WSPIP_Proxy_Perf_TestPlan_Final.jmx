<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="2.7" jmeter="2.12 r1636949">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="ZoomLayer" elementType="Argument">
            <stringProp name="Argument.name">ZoomLayer</stringProp>
            <stringProp name="Argument.value">0</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="TileRow" elementType="Argument">
            <stringProp name="Argument.name">TileRow</stringProp>
            <stringProp name="Argument.value">3</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="TileColumn" elementType="Argument">
            <stringProp name="Argument.name">TileColumn</stringProp>
            <stringProp name="Argument.value">0</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time"></stringProp>
        <longProp name="ThreadGroup.start_time">1420552995000</longProp>
        <longProp name="ThreadGroup.end_time">1420552995000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Zoom Layers" enabled="true">
          <boolProp name="LoopController.continue_forever">true</boolProp>
          <stringProp name="LoopController.loops">13</stringProp>
        </LoopController>
        <hashTree>
          <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Z" enabled="true">
            <stringProp name="CounterConfig.start">0</stringProp>
            <stringProp name="CounterConfig.end">13</stringProp>
            <stringProp name="CounterConfig.incr">1</stringProp>
            <stringProp name="CounterConfig.name">ZoomLayer</stringProp>
            <stringProp name="CounterConfig.format"></stringProp>
            <boolProp name="CounterConfig.per_user">false</boolProp>
          </CounterConfig>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Product Header" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">product</stringProp>
                <stringProp name="Header.value">Free</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If ZoomLayer=0" enabled="true">
            <stringProp name="IfController.condition">${ZoomLayer}==0</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="Initialise Tile Column &amp; Row  Min ,Max for zoom level 0" enabled="true">
              <stringProp name="scriptLanguage">javascript</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">//initialise TileColumn counter start value to be Tile Column minimum zoom level

var r1=Number(vars.get(&quot;TileColumn&quot;));
r1=0;
vars.put(&quot;TileColumn&quot;,r1);
vars.put(&quot;TileColumnMin&quot;,r1);

//initialise TileRow counter start value to be Tile Row minimum zoom level

var r2=Number(vars.get(&quot;TileRow&quot;));
r2=3;
vars.put(&quot;TileRow&quot;,r2);

// set tile column minimum value for the zoom level
vars.put(&quot;TileColumnMin&quot;,r1);
// set tile row minimum value for the zoom level
vars.put(&quot;TileRowMin&quot;,r2);

// set tile column max value for the zoom level
var tileColumnMax=Number(1);
vars.put(&quot;TileColumnMax&quot;,tileColumnMax);


// set tile row max value for the zoom level
var tileRowMax=Number(5);
vars.put(&quot;TileRowMax&quot;,tileRowMax);



</stringProp>
            </BSFSampler>
            <hashTree/>
            <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="While Controller" enabled="true">
              <stringProp name="WhileController.condition">${__javaScript(${TileRow}&lt;=${TileRowMax})}</stringProp>
            </WhileController>
            <hashTree>
              <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="While Controller" enabled="true">
                <stringProp name="WhileController.condition">${__javaScript(${TileColumn}&lt;=${TileColumnMax})}</stringProp>
              </WhileController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Tile Request  for layer ${ZoomLayer} ${TileRow} ${TileColumn}" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="service" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">WMTS</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">service</stringProp>
                      </elementProp>
                      <elementProp name="request" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">GetTile</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">request</stringProp>
                      </elementProp>
                      <elementProp name="version" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">1.0.0</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">version</stringProp>
                      </elementProp>
                      <elementProp name="layer" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">Zoom+Map+Auto</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">layer</stringProp>
                      </elementProp>
                      <elementProp name="style" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">default</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">style</stringProp>
                      </elementProp>
                      <elementProp name="format" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">image/png</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">format</stringProp>
                      </elementProp>
                      <elementProp name="TileCol" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${TileColumn}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">TileCol</stringProp>
                      </elementProp>
                      <elementProp name="TileRow" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${TileRow}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">TileRow</stringProp>
                      </elementProp>
                      <elementProp name="TileMatrixSet" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">EPSG:27700</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">TileMatrixSet</stringProp>
                      </elementProp>
                      <elementProp name="TileMatrix" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">EPSG:27700:${ZoomLayer}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">TileMatrix</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">gwccluster2-env.elasticbeanstalk.com</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol">http</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/service/wmts?</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="Increment Tile Column" enabled="true">
                  <stringProp name="scriptLanguage">javascript</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">var c=Number(vars.get(&quot;TileColumn&quot;));
c=c+1;

vars.put(&quot;TileColumn&quot;,c);</stringProp>
                </BSFSampler>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="Set Tile Column to 0" enabled="true">
                <stringProp name="scriptLanguage">javascript</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">var r=Number(vars.get(&quot;TileColumnMin&quot;));

vars.put(&quot;TileColumn&quot;,r);</stringProp>
              </BSFSampler>
              <hashTree/>
              <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="Increment Tile Row" enabled="true">
                <stringProp name="scriptLanguage">javascript</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">var r=Number(vars.get(&quot;TileRow&quot;));
r=r+1;

vars.put(&quot;TileRow&quot;,r);</stringProp>
              </BSFSampler>
              <hashTree/>
            </hashTree>
            <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="Set Tile Row to 0" enabled="true">
              <stringProp name="scriptLanguage">javascript</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">var r=Number(vars.get(&quot;TileRowMin&quot;));
vars.put(&quot;TileRow&quot;,r);</stringProp>
            </BSFSampler>
            <hashTree/>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If ZoomLayer=0" enabled="true">
              <stringProp name="IfController.condition">${ZoomLayer}==0</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree>
              <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="Initialise Tile Column &amp; Row  Min ,Max for zoom level 0" enabled="true">
                <stringProp name="scriptLanguage">javascript</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">//initialise TileColumn counter start value to be Tile Column minimum zoom level

var r1=Number(vars.get(&quot;TileColumn&quot;));
r1=0;
vars.put(&quot;TileColumn&quot;,r1);
vars.put(&quot;TileColumnMin&quot;,r1);

//initialise TileRow counter start value to be Tile Row minimum zoom level

var r2=Number(vars.get(&quot;TileRow&quot;));
r2=3;
vars.put(&quot;TileRow&quot;,r2);

// set tile column minimum value for the zoom level
vars.put(&quot;TileColumnMin&quot;,r1);
// set tile row minimum value for the zoom level
vars.put(&quot;TileRowMin&quot;,r2);

// set tile column max value for the zoom level
var tileColumnMax=Number(1);
vars.put(&quot;TileColumnMax&quot;,tileColumnMax);


// set tile row max value for the zoom level
var tileRowMax=Number(5);
vars.put(&quot;TileRowMax&quot;,tileRowMax);



</stringProp>
              </BSFSampler>
              <hashTree/>
              <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="While Controller" enabled="true">
                <stringProp name="WhileController.condition">${__javaScript(${TileRow}&lt;=${TileRowMax})}</stringProp>
              </WhileController>
              <hashTree>
                <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="While Controller" enabled="true">
                  <stringProp name="WhileController.condition">${__javaScript(${TileColumn}&lt;=${TileColumnMax})}</stringProp>
                </WhileController>
                <hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Tile Request  for layer ${ZoomLayer} ${TileRow} ${TileColumn}" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="service" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">WMTS</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">service</stringProp>
                        </elementProp>
                        <elementProp name="request" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">GetTile</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">request</stringProp>
                        </elementProp>
                        <elementProp name="version" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">1.0.0</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">version</stringProp>
                        </elementProp>
                        <elementProp name="layer" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">Zoom+Map+Auto</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">layer</stringProp>
                        </elementProp>
                        <elementProp name="style" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">default</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">style</stringProp>
                        </elementProp>
                        <elementProp name="format" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">image/png</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">format</stringProp>
                        </elementProp>
                        <elementProp name="TileCol" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${TileColumn}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">TileCol</stringProp>
                        </elementProp>
                        <elementProp name="TileRow" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${TileRow}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">TileRow</stringProp>
                        </elementProp>
                        <elementProp name="TileMatrixSet" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">EPSG:27700</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">TileMatrixSet</stringProp>
                        </elementProp>
                        <elementProp name="TileMatrix" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">EPSG:27700:${ZoomLayer}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">TileMatrix</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">gwccluster2-env.elasticbeanstalk.com</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol">http</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/service/wmts?</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree/>
                  <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="Increment Tile Column" enabled="true">
                    <stringProp name="scriptLanguage">javascript</stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="script">var c=Number(vars.get(&quot;TileColumn&quot;));
c=c+1;

vars.put(&quot;TileColumn&quot;,c);</stringProp>
                  </BSFSampler>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="49586">200</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">16</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                </hashTree>
                <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="Set Tile Column to 0" enabled="true">
                  <stringProp name="scriptLanguage">javascript</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">var r=Number(vars.get(&quot;TileColumnMin&quot;));

vars.put(&quot;TileColumn&quot;,r);</stringProp>
                </BSFSampler>
                <hashTree/>
                <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="Increment Tile Row" enabled="true">
                  <stringProp name="scriptLanguage">javascript</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">var r=Number(vars.get(&quot;TileRow&quot;));
r=r+1;

vars.put(&quot;TileRow&quot;,r);</stringProp>
                </BSFSampler>
                <hashTree/>
              </hashTree>
              <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="Set Tile Row to 0" enabled="true">
                <stringProp name="scriptLanguage">javascript</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">var r=Number(vars.get(&quot;TileRowMin&quot;));
vars.put(&quot;TileRow&quot;,r);</stringProp>
              </BSFSampler>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If ZoomLayer=0" enabled="true">
              <stringProp name="IfController.condition">${ZoomLayer}==0</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree>
              <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="Initialise Tile Column &amp; Row  Min ,Max for zoom level 0" enabled="true">
                <stringProp name="scriptLanguage">javascript</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">//initialise TileColumn counter start value to be Tile Column minimum zoom level

var r1=Number(vars.get(&quot;TileColumn&quot;));
r1=0;
vars.put(&quot;TileColumn&quot;,r1);
vars.put(&quot;TileColumnMin&quot;,r1);

//initialise TileRow counter start value to be Tile Row minimum zoom level

var r2=Number(vars.get(&quot;TileRow&quot;));
r2=3;
vars.put(&quot;TileRow&quot;,r2);

// set tile column minimum value for the zoom level
vars.put(&quot;TileColumnMin&quot;,r1);
// set tile row minimum value for the zoom level
vars.put(&quot;TileRowMin&quot;,r2);

// set tile column max value for the zoom level
var tileColumnMax=Number(1);
vars.put(&quot;TileColumnMax&quot;,tileColumnMax);


// set tile row max value for the zoom level
var tileRowMax=Number(5);
vars.put(&quot;TileRowMax&quot;,tileRowMax);



</stringProp>
              </BSFSampler>
              <hashTree/>
              <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="While Controller" enabled="true">
                <stringProp name="WhileController.condition">${__javaScript(${TileRow}&lt;=${TileRowMax})}</stringProp>
              </WhileController>
              <hashTree>
                <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="While Controller" enabled="true">
                  <stringProp name="WhileController.condition">${__javaScript(${TileColumn}&lt;=${TileColumnMax})}</stringProp>
                </WhileController>
                <hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Tile Request  for layer ${ZoomLayer} ${TileRow} ${TileColumn}" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="service" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">WMTS</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">service</stringProp>
                        </elementProp>
                        <elementProp name="request" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">GetTile</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">request</stringProp>
                        </elementProp>
                        <elementProp name="version" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">1.0.0</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">version</stringProp>
                        </elementProp>
                        <elementProp name="layer" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">Zoom+Map+Auto</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">layer</stringProp>
                        </elementProp>
                        <elementProp name="style" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">default</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">style</stringProp>
                        </elementProp>
                        <elementProp name="format" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">image/png</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">format</stringProp>
                        </elementProp>
                        <elementProp name="TileCol" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${TileColumn}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">TileCol</stringProp>
                        </elementProp>
                        <elementProp name="TileRow" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${TileRow}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">TileRow</stringProp>
                        </elementProp>
                        <elementProp name="TileMatrixSet" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">EPSG:27700</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">TileMatrixSet</stringProp>
                        </elementProp>
                        <elementProp name="TileMatrix" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">EPSG:27700:${ZoomLayer}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">TileMatrix</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">gwccluster2-env.elasticbeanstalk.com</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol">http</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/service/wmts?</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree/>
                  <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="Increment Tile Column" enabled="true">
                    <stringProp name="scriptLanguage">javascript</stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="script">var c=Number(vars.get(&quot;TileColumn&quot;));
c=c+1;

vars.put(&quot;TileColumn&quot;,c);</stringProp>
                  </BSFSampler>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="49586">200</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">16</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                </hashTree>
                <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="Set Tile Column to 0" enabled="true">
                  <stringProp name="scriptLanguage">javascript</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">var r=Number(vars.get(&quot;TileColumnMin&quot;));

vars.put(&quot;TileColumn&quot;,r);</stringProp>
                </BSFSampler>
                <hashTree/>
                <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="Increment Tile Row" enabled="true">
                  <stringProp name="scriptLanguage">javascript</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">var r=Number(vars.get(&quot;TileRow&quot;));
r=r+1;

vars.put(&quot;TileRow&quot;,r);</stringProp>
                </BSFSampler>
                <hashTree/>
              </hashTree>
              <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="Set Tile Row to 0" enabled="true">
                <stringProp name="scriptLanguage">javascript</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">var r=Number(vars.get(&quot;TileRowMin&quot;));
vars.put(&quot;TileRow&quot;,r);</stringProp>
              </BSFSampler>
              <hashTree/>
            </hashTree>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If ZoomLayer=1" enabled="true">
            <stringProp name="IfController.condition">${ZoomLayer}==1</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="Initialise Tile Column &amp; Row  Min ,Max for zoom level 1" enabled="true">
              <stringProp name="scriptLanguage">javascript</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">//initialise TileColumn counter start value to be Tile Column minimum zoom level

var r1=Number(vars.get(&quot;TileColumn&quot;));
r1=1;
vars.put(&quot;TileColumn&quot;,r1);



//initialise TileRow counter start value to be Tile Row minimum zoom level
var r2=Number(vars.get(&quot;TileRow&quot;));
r2=3;
vars.put(&quot;TileRow&quot;,r2);



// set tile column minimum value for the zoom level
vars.put(&quot;TileColumnMin&quot;,r1);


// set tile row minimum value for the zoom level
vars.put(&quot;TileRowMin&quot;,r2);


// set tile column max value for the zoom level
var tileColumnMax=Number(3);
vars.put(&quot;TileColumnMax&quot;,tileColumnMax);



// set tile row max value for the zoom level
var tileRowMax=Number(11);
vars.put(&quot;TileRowMax&quot;,tileRowMax);






</stringProp>
            </BSFSampler>
            <hashTree/>
            <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="While Controller" enabled="true">
              <stringProp name="WhileController.condition">${__javaScript(${TileRow}&lt;=${TileRowMax})}</stringProp>
            </WhileController>
            <hashTree>
              <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="While Controller" enabled="true">
                <stringProp name="WhileController.condition">${__javaScript(${TileColumn}&lt;=${TileColumnMax})}</stringProp>
              </WhileController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Tile Request  for layer ${ZoomLayer} ${TileRow} ${TileColumn}" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="service" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">WMTS</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">service</stringProp>
                      </elementProp>
                      <elementProp name="request" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">GetTile</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">request</stringProp>
                      </elementProp>
                      <elementProp name="version" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">1.0.0</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">version</stringProp>
                      </elementProp>
                      <elementProp name="layer" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">Zoom+Map+Auto</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">layer</stringProp>
                      </elementProp>
                      <elementProp name="style" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">default</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">style</stringProp>
                      </elementProp>
                      <elementProp name="format" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">image/png</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">format</stringProp>
                      </elementProp>
                      <elementProp name="TileCol" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${TileColumn}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">TileCol</stringProp>
                      </elementProp>
                      <elementProp name="TileRow" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${TileRow}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">TileRow</stringProp>
                      </elementProp>
                      <elementProp name="TileMatrixSet" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">EPSG:27700</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">TileMatrixSet</stringProp>
                      </elementProp>
                      <elementProp name="TileMatrix" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">EPSG:27700:${ZoomLayer}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">TileMatrix</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">gwccluster2-env.elasticbeanstalk.com</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol">http</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/service/wmts?</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="Increment Tile Column" enabled="true">
                  <stringProp name="scriptLanguage">javascript</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">var c=Number(vars.get(&quot;TileColumn&quot;));
c=c+1;

vars.put(&quot;TileColumn&quot;,c);</stringProp>
                </BSFSampler>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="Set Tile Column to 0" enabled="true">
                <stringProp name="scriptLanguage">javascript</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">var r=Number(vars.get(&quot;TileColumnMin&quot;));
vars.put(&quot;TileColumn&quot;,r);</stringProp>
              </BSFSampler>
              <hashTree/>
              <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="Increment Tile Row" enabled="true">
                <stringProp name="scriptLanguage">javascript</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">var r=Number(vars.get(&quot;TileRow&quot;));
r=r+1;

vars.put(&quot;TileRow&quot;,r);</stringProp>
              </BSFSampler>
              <hashTree/>
            </hashTree>
            <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="Set Tile Row to 0" enabled="true">
              <stringProp name="scriptLanguage">javascript</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">var r=Number(vars.get(&quot;TileRowMin&quot;));
vars.put(&quot;TileRow&quot;,r);</stringProp>
            </BSFSampler>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If ZoomLayer=2" enabled="true">
            <stringProp name="IfController.condition">${ZoomLayer}==2</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="Initialise Tile Column &amp; Row  Min ,Max for zoom level 2" enabled="true">
              <stringProp name="scriptLanguage">javascript</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">//initialise TileColumn counter start value to be Tile Column minimum zoom level

var r1=Number(vars.get(&quot;TileColumn&quot;));
r1=3;
vars.put(&quot;TileColumn&quot;,r1);



//initialise TileRow counter start value to be Tile Row minimum zoom level
var r2=Number(vars.get(&quot;TileRow&quot;));
r2=12;
vars.put(&quot;TileRow&quot;,r2);



// set tile column minimum value for the zoom level
vars.put(&quot;TileColumnMin&quot;,r1);


// set tile row minimum value for the zoom level
vars.put(&quot;TileRowMin&quot;,r2);


// set tile column max value for the zoom level
var tileColumnMax=Number(7);
vars.put(&quot;TileColumnMax&quot;,tileColumnMax);



// set tile row max value for the zoom level
var tileRowMax=Number(22);
vars.put(&quot;TileRowMax&quot;,tileRowMax);






</stringProp>
            </BSFSampler>
            <hashTree/>
            <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="While Controller" enabled="true">
              <stringProp name="WhileController.condition">${__javaScript(${TileRow}&lt;=${TileRowMax})}</stringProp>
            </WhileController>
            <hashTree>
              <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="While Controller" enabled="true">
                <stringProp name="WhileController.condition">${__javaScript(${TileColumn}&lt;=${TileColumnMax})}</stringProp>
              </WhileController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Tile Request  for layer ${ZoomLayer} ${TileRow} ${TileColumn}" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="service" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">WMTS</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">service</stringProp>
                      </elementProp>
                      <elementProp name="request" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">GetTile</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">request</stringProp>
                      </elementProp>
                      <elementProp name="version" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">1.0.0</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">version</stringProp>
                      </elementProp>
                      <elementProp name="layer" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">Zoom+Map+Auto</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">layer</stringProp>
                      </elementProp>
                      <elementProp name="style" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">default</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">style</stringProp>
                      </elementProp>
                      <elementProp name="format" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">image/png</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">format</stringProp>
                      </elementProp>
                      <elementProp name="TileCol" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${TileColumn}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">TileCol</stringProp>
                      </elementProp>
                      <elementProp name="TileRow" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${TileRow}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">TileRow</stringProp>
                      </elementProp>
                      <elementProp name="TileMatrixSet" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">EPSG:27700</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">TileMatrixSet</stringProp>
                      </elementProp>
                      <elementProp name="TileMatrix" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">EPSG:27700:${ZoomLayer}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">TileMatrix</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">gwccluster2-env.elasticbeanstalk.com</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol">http</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/service/wmts?</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="Increment Tile Column" enabled="true">
                  <stringProp name="scriptLanguage">javascript</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">var c=Number(vars.get(&quot;TileColumn&quot;));
c=c+1;

vars.put(&quot;TileColumn&quot;,c);</stringProp>
                </BSFSampler>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="Set Tile Column to 0" enabled="true">
                <stringProp name="scriptLanguage">javascript</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">var r=Number(vars.get(&quot;TileColumnMin&quot;));
vars.put(&quot;TileColumn&quot;,r);</stringProp>
              </BSFSampler>
              <hashTree/>
              <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="Increment Tile Row" enabled="true">
                <stringProp name="scriptLanguage">javascript</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">var r=Number(vars.get(&quot;TileRow&quot;));
r=r+1;

vars.put(&quot;TileRow&quot;,r);</stringProp>
              </BSFSampler>
              <hashTree/>
            </hashTree>
            <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="Set Tile Row to 0" enabled="true">
              <stringProp name="scriptLanguage">javascript</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">var r=Number(vars.get(&quot;TileRowMin&quot;));
vars.put(&quot;TileRow&quot;,r);</stringProp>
            </BSFSampler>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If ZoomLayer=3" enabled="true">
            <stringProp name="IfController.condition">${ZoomLayer}==3</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="Initialise Tile Column &amp; Row  Min ,Max for zoom level 3" enabled="true">
              <stringProp name="scriptLanguage">javascript</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">//initialise TileColumn counter start value to be Tile Column minimum zoom level

var r1=Number(vars.get(&quot;TileColumn&quot;));
r1=9;
vars.put(&quot;TileColumn&quot;,r1);



//initialise TileRow counter start value to be Tile Row minimum zoom level
var r2=Number(vars.get(&quot;TileRow&quot;));
r2=34;
vars.put(&quot;TileRow&quot;,r2);



// set tile column minimum value for the zoom level
vars.put(&quot;TileColumnMin&quot;,r1);


// set tile row minimum value for the zoom level
vars.put(&quot;TileRowMin&quot;,r2);


// set tile column max value for the zoom level
var tileColumnMax=Number(18);
vars.put(&quot;TileColumnMax&quot;,tileColumnMax);



// set tile row max value for the zoom level
var tileRowMax=Number(44);
vars.put(&quot;TileRowMax&quot;,tileRowMax);






</stringProp>
            </BSFSampler>
            <hashTree/>
            <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="While Controller" enabled="true">
              <stringProp name="WhileController.condition">${__javaScript(${TileRow}&lt;=${TileRowMax})}</stringProp>
            </WhileController>
            <hashTree>
              <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="While Controller" enabled="true">
                <stringProp name="WhileController.condition">${__javaScript(${TileColumn}&lt;=${TileColumnMax})}</stringProp>
              </WhileController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Tile Request  for layer ${ZoomLayer} ${TileRow} ${TileColumn}" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="service" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">WMTS</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">service</stringProp>
                      </elementProp>
                      <elementProp name="request" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">GetTile</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">request</stringProp>
                      </elementProp>
                      <elementProp name="version" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">1.0.0</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">version</stringProp>
                      </elementProp>
                      <elementProp name="layer" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">Zoom+Map+Auto</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">layer</stringProp>
                      </elementProp>
                      <elementProp name="style" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">default</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">style</stringProp>
                      </elementProp>
                      <elementProp name="format" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">image/png</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">format</stringProp>
                      </elementProp>
                      <elementProp name="TileCol" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${TileColumn}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">TileCol</stringProp>
                      </elementProp>
                      <elementProp name="TileRow" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${TileRow}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">TileRow</stringProp>
                      </elementProp>
                      <elementProp name="TileMatrixSet" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">EPSG:27700</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">TileMatrixSet</stringProp>
                      </elementProp>
                      <elementProp name="TileMatrix" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">EPSG:27700:${ZoomLayer}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">TileMatrix</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">gwccluster2-env.elasticbeanstalk.com</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol">http</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/service/wmts?</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="Increment Tile Column" enabled="true">
                  <stringProp name="scriptLanguage">javascript</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">var c=Number(vars.get(&quot;TileColumn&quot;));
c=c+1;

vars.put(&quot;TileColumn&quot;,c);</stringProp>
                </BSFSampler>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="Set Tile Column to 0" enabled="true">
                <stringProp name="scriptLanguage">javascript</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">var r=Number(vars.get(&quot;TileColumnMin&quot;));
vars.put(&quot;TileColumn&quot;,r);</stringProp>
              </BSFSampler>
              <hashTree/>
              <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="Increment Tile Row" enabled="true">
                <stringProp name="scriptLanguage">javascript</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">var r=Number(vars.get(&quot;TileRow&quot;));
r=r+1;

vars.put(&quot;TileRow&quot;,r);</stringProp>
              </BSFSampler>
              <hashTree/>
            </hashTree>
            <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="Set Tile Row to 0" enabled="true">
              <stringProp name="scriptLanguage">javascript</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">var r=Number(vars.get(&quot;TileRowMin&quot;));
vars.put(&quot;TileRow&quot;,r);</stringProp>
            </BSFSampler>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If ZoomLayer=4" enabled="true">
            <stringProp name="IfController.condition">${ZoomLayer}==4</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="Initialise Tile Column &amp; Row  Min ,Max for zoom level 4" enabled="true">
              <stringProp name="scriptLanguage">javascript</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">//initialise TileColumn counter start value to be Tile Column minimum zoom level

var r1=Number(vars.get(&quot;TileColumn&quot;));
r1=27;
vars.put(&quot;TileColumn&quot;,r1);



//initialise TileRow counter start value to be Tile Row minimum zoom level
var r2=Number(vars.get(&quot;TileRow&quot;));
r2=72;
vars.put(&quot;TileRow&quot;,r2);



// set tile column minimum value for the zoom level
vars.put(&quot;TileColumnMin&quot;,r1);


// set tile row minimum value for the zoom level
vars.put(&quot;TileRowMin&quot;,r2);


// set tile column max value for the zoom level
var tileColumnMax=Number(42);
vars.put(&quot;TileColumnMax&quot;,tileColumnMax);



// set tile row max value for the zoom level
var tileRowMax=Number(87);
vars.put(&quot;TileRowMax&quot;,tileRowMax);






</stringProp>
            </BSFSampler>
            <hashTree/>
            <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="While Controller" enabled="true">
              <stringProp name="WhileController.condition">${__javaScript(${TileRow}&lt;=${TileRowMax})}</stringProp>
            </WhileController>
            <hashTree>
              <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="While Controller" enabled="true">
                <stringProp name="WhileController.condition">${__javaScript(${TileColumn}&lt;=${TileColumnMax})}</stringProp>
              </WhileController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Tile Request  for layer ${ZoomLayer} ${TileRow} ${TileColumn}" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="service" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">WMTS</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">service</stringProp>
                      </elementProp>
                      <elementProp name="request" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">GetTile</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">request</stringProp>
                      </elementProp>
                      <elementProp name="version" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">1.0.0</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">version</stringProp>
                      </elementProp>
                      <elementProp name="layer" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">Zoom+Map+Auto</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">layer</stringProp>
                      </elementProp>
                      <elementProp name="style" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">default</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">style</stringProp>
                      </elementProp>
                      <elementProp name="format" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">image/png</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">format</stringProp>
                      </elementProp>
                      <elementProp name="TileCol" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${TileColumn}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">TileCol</stringProp>
                      </elementProp>
                      <elementProp name="TileRow" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${TileRow}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">TileRow</stringProp>
                      </elementProp>
                      <elementProp name="TileMatrixSet" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">EPSG:27700</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">TileMatrixSet</stringProp>
                      </elementProp>
                      <elementProp name="TileMatrix" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">EPSG:27700:${ZoomLayer}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">TileMatrix</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">gwccluster2-env.elasticbeanstalk.com</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol">http</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/service/wmts?</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="Increment Tile Column" enabled="true">
                  <stringProp name="scriptLanguage">javascript</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">var c=Number(vars.get(&quot;TileColumn&quot;));
c=c+1;

vars.put(&quot;TileColumn&quot;,c);</stringProp>
                </BSFSampler>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="Set Tile Column to 0" enabled="true">
                <stringProp name="scriptLanguage">javascript</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">var r=Number(vars.get(&quot;TileColumnMin&quot;));
vars.put(&quot;TileColumn&quot;,r);</stringProp>
              </BSFSampler>
              <hashTree/>
              <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="Increment Tile Row" enabled="true">
                <stringProp name="scriptLanguage">javascript</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">var r=Number(vars.get(&quot;TileRow&quot;));
r=r+1;

vars.put(&quot;TileRow&quot;,r);</stringProp>
              </BSFSampler>
              <hashTree/>
            </hashTree>
            <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="Set Tile Row to 0" enabled="true">
              <stringProp name="scriptLanguage">javascript</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">var r=Number(vars.get(&quot;TileRowMin&quot;));
vars.put(&quot;TileRow&quot;,r);</stringProp>
            </BSFSampler>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If ZoomLayer=5" enabled="true">
            <stringProp name="IfController.condition">${ZoomLayer}==5</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="Initialise Tile Column &amp; Row  Min ,Max for zoom level 5" enabled="true">
              <stringProp name="scriptLanguage">javascript</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">//initialise TileColumn counter start value to be Tile Column minimum zoom level

var r1=Number(vars.get(&quot;TileColumn&quot;));
r1=55;
vars.put(&quot;TileColumn&quot;,r1);



//initialise TileRow counter start value to be Tile Row minimum zoom level
var r2=Number(vars.get(&quot;TileRow&quot;));
r2=155;
vars.put(&quot;TileRow&quot;,r2);



// set tile column minimum value for the zoom level
vars.put(&quot;TileColumnMin&quot;,r1);


// set tile row minimum value for the zoom level
vars.put(&quot;TileRowMin&quot;,r2);


// set tile column max value for the zoom level
var tileColumnMax=Number(80);
vars.put(&quot;TileColumnMax&quot;,tileColumnMax);



// set tile row max value for the zoom level
var tileRowMax=Number(177);
vars.put(&quot;TileRowMax&quot;,tileRowMax);






</stringProp>
            </BSFSampler>
            <hashTree/>
            <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="While Controller" enabled="true">
              <stringProp name="WhileController.condition">${__javaScript(${TileRow}&lt;=${TileRowMax})}</stringProp>
            </WhileController>
            <hashTree>
              <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="While Controller" enabled="true">
                <stringProp name="WhileController.condition">${__javaScript(${TileColumn}&lt;=${TileColumnMax})}</stringProp>
              </WhileController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Tile Request  for layer ${ZoomLayer} ${TileRow} ${TileColumn}" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="service" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">WMTS</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">service</stringProp>
                      </elementProp>
                      <elementProp name="request" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">GetTile</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">request</stringProp>
                      </elementProp>
                      <elementProp name="version" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">1.0.0</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">version</stringProp>
                      </elementProp>
                      <elementProp name="layer" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">Zoom+Map+Auto</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">layer</stringProp>
                      </elementProp>
                      <elementProp name="style" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">default</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">style</stringProp>
                      </elementProp>
                      <elementProp name="format" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">image/png</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">format</stringProp>
                      </elementProp>
                      <elementProp name="TileCol" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${TileColumn}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">TileCol</stringProp>
                      </elementProp>
                      <elementProp name="TileRow" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${TileRow}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">TileRow</stringProp>
                      </elementProp>
                      <elementProp name="TileMatrixSet" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">EPSG:27700</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">TileMatrixSet</stringProp>
                      </elementProp>
                      <elementProp name="TileMatrix" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">EPSG:27700:${ZoomLayer}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">TileMatrix</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">gwccluster2-env.elasticbeanstalk.com</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol">http</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/service/wmts?</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="Increment Tile Column" enabled="true">
                  <stringProp name="scriptLanguage">javascript</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">var c=Number(vars.get(&quot;TileColumn&quot;));
c=c+1;

vars.put(&quot;TileColumn&quot;,c);</stringProp>
                </BSFSampler>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="Set Tile Column to 0" enabled="true">
                <stringProp name="scriptLanguage">javascript</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">var r=Number(vars.get(&quot;TileColumnMin&quot;));
vars.put(&quot;TileColumn&quot;,r);</stringProp>
              </BSFSampler>
              <hashTree/>
              <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="Increment Tile Row" enabled="true">
                <stringProp name="scriptLanguage">javascript</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">var r=Number(vars.get(&quot;TileRow&quot;));
r=r+1;

vars.put(&quot;TileRow&quot;,r);</stringProp>
              </BSFSampler>
              <hashTree/>
            </hashTree>
            <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="Set Tile Row to 0" enabled="true">
              <stringProp name="scriptLanguage">javascript</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">var r=Number(vars.get(&quot;TileRowMin&quot;));
vars.put(&quot;TileRow&quot;,r);</stringProp>
            </BSFSampler>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If ZoomLayer=6" enabled="true">
            <stringProp name="IfController.condition">${ZoomLayer}==6</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="Initialise Tile Column &amp; Row  Min ,Max for zoom level 6" enabled="true">
              <stringProp name="scriptLanguage">javascript</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">//initialise TileColumn counter start value to be Tile Column minimum zoom level

var r1=Number(vars.get(&quot;TileColumn&quot;));
r1=111;
vars.put(&quot;TileColumn&quot;,r1);
vars.put(&quot;TileColumnMin&quot;,r1);

//initialise TileRow counter start value to be Tile Row minimum zoom level

var r2=Number(vars.get(&quot;TileRow&quot;));
r2=321;
vars.put(&quot;TileRow&quot;,r2);

// set tile column minimum value for the zoom level
vars.put(&quot;TileColumnMin&quot;,r1);
// set tile row minimum value for the zoom level
vars.put(&quot;TileRowMin&quot;,r2);

// set tile column max value for the zoom level
var tileColumnMax=Number(141);
vars.put(&quot;TileColumnMax&quot;,tileColumnMax);


// set tile row max value for the zoom level
var tileRowMax=Number(355);
vars.put(&quot;TileRowMax&quot;,tileRowMax);



</stringProp>
            </BSFSampler>
            <hashTree/>
            <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="While Controller" enabled="true">
              <stringProp name="WhileController.condition">${__javaScript(${TileRow}&lt;=${TileRowMax})}</stringProp>
            </WhileController>
            <hashTree>
              <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="While Controller" enabled="true">
                <stringProp name="WhileController.condition">${__javaScript(${TileColumn}&lt;=${TileColumnMax})}</stringProp>
              </WhileController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Tile Request  for layer ${ZoomLayer} ${TileRow} ${TileColumn}" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="service" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">WMTS</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">service</stringProp>
                      </elementProp>
                      <elementProp name="request" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">GetTile</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">request</stringProp>
                      </elementProp>
                      <elementProp name="version" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">1.0.0</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">version</stringProp>
                      </elementProp>
                      <elementProp name="layer" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">Zoom+Map+Auto</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">layer</stringProp>
                      </elementProp>
                      <elementProp name="style" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">default</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">style</stringProp>
                      </elementProp>
                      <elementProp name="format" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">image/png</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">format</stringProp>
                      </elementProp>
                      <elementProp name="TileCol" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${TileColumn}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">TileCol</stringProp>
                      </elementProp>
                      <elementProp name="TileRow" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${TileRow}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">TileRow</stringProp>
                      </elementProp>
                      <elementProp name="TileMatrixSet" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">EPSG:27700</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">TileMatrixSet</stringProp>
                      </elementProp>
                      <elementProp name="TileMatrix" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">EPSG:27700:${ZoomLayer}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">TileMatrix</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">gwccluster2-env.elasticbeanstalk.com</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol">http</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/service/wmts?</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="Increment Tile Column" enabled="true">
                  <stringProp name="scriptLanguage">javascript</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">var c=Number(vars.get(&quot;TileColumn&quot;));
c=c+1;

vars.put(&quot;TileColumn&quot;,c);</stringProp>
                </BSFSampler>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="Set Tile Column to 0" enabled="true">
                <stringProp name="scriptLanguage">javascript</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">var r=Number(vars.get(&quot;TileColumnMin&quot;));

vars.put(&quot;TileColumn&quot;,r);</stringProp>
              </BSFSampler>
              <hashTree/>
              <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="Increment Tile Row" enabled="true">
                <stringProp name="scriptLanguage">javascript</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">var r=Number(vars.get(&quot;TileRow&quot;));
r=r+1;

vars.put(&quot;TileRow&quot;,r);</stringProp>
              </BSFSampler>
              <hashTree/>
            </hashTree>
            <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="Set Tile Row to 0" enabled="true">
              <stringProp name="scriptLanguage">javascript</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">var r=Number(vars.get(&quot;TileRowMin&quot;));
vars.put(&quot;TileRow&quot;,r);</stringProp>
            </BSFSampler>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If ZoomLayer=7" enabled="true">
            <stringProp name="IfController.condition">${ZoomLayer}==7</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="Initialise Tile Column &amp; Row  Min ,Max for zoom level 7" enabled="true">
              <stringProp name="scriptLanguage">javascript</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">//initialise TileColumn counter start value to be Tile Column minimum zoom level

var r1=Number(vars.get(&quot;TileColumn&quot;));
r1=170;
vars.put(&quot;TileColumn&quot;,r1);
vars.put(&quot;TileColumnMin&quot;,r1);

//initialise TileRow counter start value to be Tile Row minimum zoom level

var r2=Number(vars.get(&quot;TileRow&quot;));
r2=598;
vars.put(&quot;TileRow&quot;,r2);

// set tile column minimum value for the zoom level
vars.put(&quot;TileColumnMin&quot;,r1);
// set tile row minimum value for the zoom level
vars.put(&quot;TileRowMin&quot;,r2);

// set tile column max value for the zoom level
var tileColumnMax=Number(255);
vars.put(&quot;TileColumnMax&quot;,tileColumnMax);


// set tile row max value for the zoom level
var tileRowMax=Number(724);
vars.put(&quot;TileRowMax&quot;,tileRowMax);



</stringProp>
            </BSFSampler>
            <hashTree/>
            <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="While Controller" enabled="true">
              <stringProp name="WhileController.condition">${__javaScript(${TileRow}&lt;=${TileRowMax})}</stringProp>
            </WhileController>
            <hashTree>
              <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="While Controller" enabled="true">
                <stringProp name="WhileController.condition">${__javaScript(${TileColumn}&lt;=${TileColumnMax})}</stringProp>
              </WhileController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Tile Request  for layer ${ZoomLayer} ${TileRow} ${TileColumn}" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="service" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">WMTS</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">service</stringProp>
                      </elementProp>
                      <elementProp name="request" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">GetTile</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">request</stringProp>
                      </elementProp>
                      <elementProp name="version" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">1.0.0</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">version</stringProp>
                      </elementProp>
                      <elementProp name="layer" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">Zoom+Map+Auto</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">layer</stringProp>
                      </elementProp>
                      <elementProp name="style" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">default</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">style</stringProp>
                      </elementProp>
                      <elementProp name="format" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">image/png</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">format</stringProp>
                      </elementProp>
                      <elementProp name="TileCol" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${TileColumn}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">TileCol</stringProp>
                      </elementProp>
                      <elementProp name="TileRow" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${TileRow}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">TileRow</stringProp>
                      </elementProp>
                      <elementProp name="TileMatrixSet" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">EPSG:27700</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">TileMatrixSet</stringProp>
                      </elementProp>
                      <elementProp name="TileMatrix" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">EPSG:27700:${ZoomLayer}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">TileMatrix</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">gwccluster2-env.elasticbeanstalk.com</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol">http</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/service/wmts?</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="Increment Tile Column" enabled="true">
                  <stringProp name="scriptLanguage">javascript</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">var c=Number(vars.get(&quot;TileColumn&quot;));
c=c+1;

vars.put(&quot;TileColumn&quot;,c);</stringProp>
                </BSFSampler>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="Set Tile Column to 0" enabled="true">
                <stringProp name="scriptLanguage">javascript</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">var r=Number(vars.get(&quot;TileColumnMin&quot;));

vars.put(&quot;TileColumn&quot;,r);</stringProp>
              </BSFSampler>
              <hashTree/>
              <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="Increment Tile Row" enabled="true">
                <stringProp name="scriptLanguage">javascript</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">var r=Number(vars.get(&quot;TileRow&quot;));
r=r+1;

vars.put(&quot;TileRow&quot;,r);</stringProp>
              </BSFSampler>
              <hashTree/>
            </hashTree>
            <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="Set Tile Row to 0" enabled="true">
              <stringProp name="scriptLanguage">javascript</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">var r=Number(vars.get(&quot;TileRowMin&quot;));
vars.put(&quot;TileRow&quot;,r);</stringProp>
            </BSFSampler>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If ZoomLayer=8" enabled="true">
            <stringProp name="IfController.condition">${ZoomLayer}==8</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="Initialise Tile Column &amp; Row  Min ,Max for zoom level 8" enabled="true">
              <stringProp name="scriptLanguage">javascript</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">//initialise TileColumn counter start value to be Tile Column minimum zoom level

var r1=Number(vars.get(&quot;TileColumn&quot;));
r1=381;
vars.put(&quot;TileColumn&quot;,r1);
vars.put(&quot;TileColumnMin&quot;,r1);

//initialise TileRow counter start value to be Tile Row minimum zoom level

var r2=Number(vars.get(&quot;TileRow&quot;));
r2=1090;
vars.put(&quot;TileRow&quot;,r2);

// set tile column minimum value for the zoom level
vars.put(&quot;TileColumnMin&quot;,r1);
// set tile row minimum value for the zoom level
vars.put(&quot;TileRowMin&quot;,r2);

// set tile column max value for the zoom level
var tileColumnMax=Number(600);
vars.put(&quot;TileColumnMax&quot;,tileColumnMax);


// set tile row max value for the zoom level
var tileRowMax=Number(1421);
vars.put(&quot;TileRowMax&quot;,tileRowMax);



</stringProp>
            </BSFSampler>
            <hashTree/>
            <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="While Controller" enabled="true">
              <stringProp name="WhileController.condition">${__javaScript(${TileRow}&lt;=${TileRowMax})}</stringProp>
            </WhileController>
            <hashTree>
              <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="While Controller" enabled="true">
                <stringProp name="WhileController.condition">${__javaScript(${TileColumn}&lt;=${TileColumnMax})}</stringProp>
              </WhileController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Tile Request  for layer ${ZoomLayer} ${TileRow} ${TileColumn}" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="service" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">WMTS</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">service</stringProp>
                      </elementProp>
                      <elementProp name="request" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">GetTile</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">request</stringProp>
                      </elementProp>
                      <elementProp name="version" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">1.0.0</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">version</stringProp>
                      </elementProp>
                      <elementProp name="layer" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">Zoom+Map+Auto</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">layer</stringProp>
                      </elementProp>
                      <elementProp name="style" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">default</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">style</stringProp>
                      </elementProp>
                      <elementProp name="format" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">image/png</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">format</stringProp>
                      </elementProp>
                      <elementProp name="TileCol" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${TileColumn}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">TileCol</stringProp>
                      </elementProp>
                      <elementProp name="TileRow" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${TileRow}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">TileRow</stringProp>
                      </elementProp>
                      <elementProp name="TileMatrixSet" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">EPSG:27700</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">TileMatrixSet</stringProp>
                      </elementProp>
                      <elementProp name="TileMatrix" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">EPSG:27700:${ZoomLayer}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">TileMatrix</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">gwccluster2-env.elasticbeanstalk.com</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol">http</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/service/wmts?</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="Increment Tile Column" enabled="true">
                  <stringProp name="scriptLanguage">javascript</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">var c=Number(vars.get(&quot;TileColumn&quot;));
c=c+1;

vars.put(&quot;TileColumn&quot;,c);</stringProp>
                </BSFSampler>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="Set Tile Column to 0" enabled="true">
                <stringProp name="scriptLanguage">javascript</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">var r=Number(vars.get(&quot;TileColumnMin&quot;));

vars.put(&quot;TileColumn&quot;,r);</stringProp>
              </BSFSampler>
              <hashTree/>
              <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="Increment Tile Row" enabled="true">
                <stringProp name="scriptLanguage">javascript</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">var r=Number(vars.get(&quot;TileRow&quot;));
r=r+1;

vars.put(&quot;TileRow&quot;,r);</stringProp>
              </BSFSampler>
              <hashTree/>
            </hashTree>
            <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="Set Tile Row to 0" enabled="true">
              <stringProp name="scriptLanguage">javascript</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">var r=Number(vars.get(&quot;TileRowMin&quot;));
vars.put(&quot;TileRow&quot;,r);</stringProp>
            </BSFSampler>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If ZoomLayer=9" enabled="true">
            <stringProp name="IfController.condition">${ZoomLayer}==9</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="Initialise Tile Column &amp; Row  Min ,Max for zoom level 9" enabled="true">
              <stringProp name="scriptLanguage">javascript</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">//initialise TileColumn counter start value to be Tile Column minimum zoom level

var r1=Number(vars.get(&quot;TileColumn&quot;));
r1=970;
vars.put(&quot;TileColumn&quot;,r1);
vars.put(&quot;TileColumnMin&quot;,r1);

//initialise TileRow counter start value to be Tile Row minimum zoom level

var r2=Number(vars.get(&quot;TileRow&quot;));
r2=1790;
vars.put(&quot;TileRow&quot;,r2);

// set tile column minimum value for the zoom level
vars.put(&quot;TileColumnMin&quot;,r1);
// set tile row minimum value for the zoom level
vars.put(&quot;TileRowMin&quot;,r2);

// set tile column max value for the zoom level
var tileColumnMax=Number(1103);
vars.put(&quot;TileColumnMax&quot;,tileColumnMax);


// set tile row max value for the zoom level
var tileRowMax=Number(2850);
vars.put(&quot;TileRowMax&quot;,tileRowMax);



</stringProp>
            </BSFSampler>
            <hashTree/>
            <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="While Controller" enabled="true">
              <stringProp name="WhileController.condition">${__javaScript(${TileRow}&lt;=${TileRowMax})}</stringProp>
            </WhileController>
            <hashTree>
              <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="While Controller" enabled="true">
                <stringProp name="WhileController.condition">${__javaScript(${TileColumn}&lt;=${TileColumnMax})}</stringProp>
              </WhileController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Tile Request  for layer ${ZoomLayer} ${TileRow} ${TileColumn}" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="service" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">WMTS</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">service</stringProp>
                      </elementProp>
                      <elementProp name="request" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">GetTile</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">request</stringProp>
                      </elementProp>
                      <elementProp name="version" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">1.0.0</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">version</stringProp>
                      </elementProp>
                      <elementProp name="layer" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">Zoom+Map+Auto</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">layer</stringProp>
                      </elementProp>
                      <elementProp name="style" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">default</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">style</stringProp>
                      </elementProp>
                      <elementProp name="format" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">image/png</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">format</stringProp>
                      </elementProp>
                      <elementProp name="TileCol" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${TileColumn}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">TileCol</stringProp>
                      </elementProp>
                      <elementProp name="TileRow" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${TileRow}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">TileRow</stringProp>
                      </elementProp>
                      <elementProp name="TileMatrixSet" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">EPSG:27700</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">TileMatrixSet</stringProp>
                      </elementProp>
                      <elementProp name="TileMatrix" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">EPSG:27700:${ZoomLayer}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">TileMatrix</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">gwccluster2-env.elasticbeanstalk.com</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol">http</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/service/wmts?</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="Increment Tile Column" enabled="true">
                  <stringProp name="scriptLanguage">javascript</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">var c=Number(vars.get(&quot;TileColumn&quot;));
c=c+1;

vars.put(&quot;TileColumn&quot;,c);</stringProp>
                </BSFSampler>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="Set Tile Column to 0" enabled="true">
                <stringProp name="scriptLanguage">javascript</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">var r=Number(vars.get(&quot;TileColumnMin&quot;));

vars.put(&quot;TileColumn&quot;,r);</stringProp>
              </BSFSampler>
              <hashTree/>
              <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="Increment Tile Row" enabled="true">
                <stringProp name="scriptLanguage">javascript</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">var r=Number(vars.get(&quot;TileRow&quot;));
r=r+1;

vars.put(&quot;TileRow&quot;,r);</stringProp>
              </BSFSampler>
              <hashTree/>
            </hashTree>
            <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="Set Tile Row to 0" enabled="true">
              <stringProp name="scriptLanguage">javascript</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">var r=Number(vars.get(&quot;TileRowMin&quot;));
vars.put(&quot;TileRow&quot;,r);</stringProp>
            </BSFSampler>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If ZoomLayer=10" enabled="true">
            <stringProp name="IfController.condition">${ZoomLayer}==10</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="Initialise Tile Column &amp; Row  Min ,Max for zoom level 10" enabled="true">
              <stringProp name="scriptLanguage">javascript</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">//initialise TileColumn counter start value to be Tile Column minimum zoom level

var r1=Number(vars.get(&quot;TileColumn&quot;));
r1=1485;
vars.put(&quot;TileColumn&quot;,r1);
vars.put(&quot;TileColumnMin&quot;,r1);

//initialise TileRow counter start value to be Tile Row minimum zoom level

var r2=Number(vars.get(&quot;TileRow&quot;));
r2=4372;
vars.put(&quot;TileRow&quot;,r2);

// set tile column minimum value for the zoom level
vars.put(&quot;TileColumnMin&quot;,r1);
// set tile row minimum value for the zoom level
vars.put(&quot;TileRowMin&quot;,r2);

// set tile column max value for the zoom level
var tileColumnMax=Number(2623);
vars.put(&quot;TileColumnMax&quot;,tileColumnMax);


// set tile row max value for the zoom level
var tileRowMax=Number(5654);
vars.put(&quot;TileRowMax&quot;,tileRowMax);



</stringProp>
            </BSFSampler>
            <hashTree/>
            <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="While Controller" enabled="true">
              <stringProp name="WhileController.condition">${__javaScript(${TileRow}&lt;=${TileRowMax})}</stringProp>
            </WhileController>
            <hashTree>
              <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="While Controller" enabled="true">
                <stringProp name="WhileController.condition">${__javaScript(${TileColumn}&lt;=${TileColumnMax})}</stringProp>
              </WhileController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Tile Request  for layer ${ZoomLayer} ${TileRow} ${TileColumn}" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="service" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">WMTS</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">service</stringProp>
                      </elementProp>
                      <elementProp name="request" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">GetTile</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">request</stringProp>
                      </elementProp>
                      <elementProp name="version" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">1.0.0</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">version</stringProp>
                      </elementProp>
                      <elementProp name="layer" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">Zoom+Map+Auto</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">layer</stringProp>
                      </elementProp>
                      <elementProp name="style" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">default</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">style</stringProp>
                      </elementProp>
                      <elementProp name="format" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">image/png</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">format</stringProp>
                      </elementProp>
                      <elementProp name="TileCol" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${TileColumn}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">TileCol</stringProp>
                      </elementProp>
                      <elementProp name="TileRow" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${TileRow}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">TileRow</stringProp>
                      </elementProp>
                      <elementProp name="TileMatrixSet" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">EPSG:27700</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">TileMatrixSet</stringProp>
                      </elementProp>
                      <elementProp name="TileMatrix" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">EPSG:27700:${ZoomLayer}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">TileMatrix</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">gwccluster2-env.elasticbeanstalk.com</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol">http</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/service/wmts?</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="Increment Tile Column" enabled="true">
                  <stringProp name="scriptLanguage">javascript</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">var c=Number(vars.get(&quot;TileColumn&quot;));
c=c+1;

vars.put(&quot;TileColumn&quot;,c);</stringProp>
                </BSFSampler>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="Set Tile Column to 0" enabled="true">
                <stringProp name="scriptLanguage">javascript</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">var r=Number(vars.get(&quot;TileColumnMin&quot;));

vars.put(&quot;TileColumn&quot;,r);</stringProp>
              </BSFSampler>
              <hashTree/>
              <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="Increment Tile Row" enabled="true">
                <stringProp name="scriptLanguage">javascript</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">var r=Number(vars.get(&quot;TileRow&quot;));
r=r+1;

vars.put(&quot;TileRow&quot;,r);</stringProp>
              </BSFSampler>
              <hashTree/>
            </hashTree>
            <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="Set Tile Row to 0" enabled="true">
              <stringProp name="scriptLanguage">javascript</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">var r=Number(vars.get(&quot;TileRowMin&quot;));
vars.put(&quot;TileRow&quot;,r);</stringProp>
            </BSFSampler>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If ZoomLayer=11" enabled="true">
            <stringProp name="IfController.condition">${ZoomLayer}==11</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="Initialise Tile Column &amp; Row  Min ,Max for zoom level 11" enabled="true">
              <stringProp name="scriptLanguage">javascript</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">//initialise TileColumn counter start value to be Tile Column minimum zoom level

var r1=Number(vars.get(&quot;TileColumn&quot;));
r1=3130;
vars.put(&quot;TileColumn&quot;,r1);
vars.put(&quot;TileColumnMin&quot;,r1);

//initialise TileRow counter start value to be Tile Row minimum zoom level

var r2=Number(vars.get(&quot;TileRow&quot;));
r2=8867;
vars.put(&quot;TileRow&quot;,r2);

// set tile column minimum value for the zoom level
vars.put(&quot;TileColumnMin&quot;,r1);
// set tile row minimum value for the zoom level
vars.put(&quot;TileRowMin&quot;,r2);

// set tile column max value for the zoom level
var tileColumnMax=Number(4774);
vars.put(&quot;TileColumnMax&quot;,tileColumnMax);


// set tile row max value for the zoom level
var tileRowMax=Number(11365);
vars.put(&quot;TileRowMax&quot;,tileRowMax);



</stringProp>
            </BSFSampler>
            <hashTree/>
            <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="While Controller" enabled="true">
              <stringProp name="WhileController.condition">${__javaScript(${TileRow}&lt;=${TileRowMax})}</stringProp>
            </WhileController>
            <hashTree>
              <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="While Controller" enabled="true">
                <stringProp name="WhileController.condition">${__javaScript(${TileColumn}&lt;=${TileColumnMax})}</stringProp>
              </WhileController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Tile Request  for layer ${ZoomLayer} ${TileRow} ${TileColumn}" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="service" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">WMTS</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">service</stringProp>
                      </elementProp>
                      <elementProp name="request" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">GetTile</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">request</stringProp>
                      </elementProp>
                      <elementProp name="version" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">1.0.0</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">version</stringProp>
                      </elementProp>
                      <elementProp name="layer" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">Zoom+Map+Auto</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">layer</stringProp>
                      </elementProp>
                      <elementProp name="style" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">default</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">style</stringProp>
                      </elementProp>
                      <elementProp name="format" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">image/png</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">format</stringProp>
                      </elementProp>
                      <elementProp name="TileCol" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${TileColumn}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">TileCol</stringProp>
                      </elementProp>
                      <elementProp name="TileRow" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${TileRow}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">TileRow</stringProp>
                      </elementProp>
                      <elementProp name="TileMatrixSet" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">EPSG:27700</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">TileMatrixSet</stringProp>
                      </elementProp>
                      <elementProp name="TileMatrix" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">EPSG:27700:${ZoomLayer}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">TileMatrix</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">gwccluster2-env.elasticbeanstalk.com</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol">http</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/service/wmts?</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="Increment Tile Column" enabled="true">
                  <stringProp name="scriptLanguage">javascript</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">var c=Number(vars.get(&quot;TileColumn&quot;));
c=c+1;

vars.put(&quot;TileColumn&quot;,c);</stringProp>
                </BSFSampler>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="Set Tile Column to 0" enabled="true">
                <stringProp name="scriptLanguage">javascript</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">var r=Number(vars.get(&quot;TileColumnMin&quot;));

vars.put(&quot;TileColumn&quot;,r);</stringProp>
              </BSFSampler>
              <hashTree/>
              <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="Increment Tile Row" enabled="true">
                <stringProp name="scriptLanguage">javascript</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">var r=Number(vars.get(&quot;TileRow&quot;));
r=r+1;

vars.put(&quot;TileRow&quot;,r);</stringProp>
              </BSFSampler>
              <hashTree/>
            </hashTree>
            <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="Set Tile Row to 0" enabled="true">
              <stringProp name="scriptLanguage">javascript</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">var r=Number(vars.get(&quot;TileRowMin&quot;));
vars.put(&quot;TileRow&quot;,r);</stringProp>
            </BSFSampler>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If ZoomLayer=12" enabled="true">
            <stringProp name="IfController.condition">${ZoomLayer}==12</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="Initialise Tile Column &amp; Row  Min ,Max for zoom level 12" enabled="true">
              <stringProp name="scriptLanguage">javascript</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">//initialise TileColumn counter start value to be Tile Column minimum zoom level

var r1=Number(vars.get(&quot;TileColumn&quot;));
r1=5444;
vars.put(&quot;TileColumn&quot;,r1);
vars.put(&quot;TileColumnMin&quot;,r1);

//initialise TileRow counter start value to be Tile Row minimum zoom level

var r2=Number(vars.get(&quot;TileRow&quot;));
r2=17734;
vars.put(&quot;TileRow&quot;,r2);

// set tile column minimum value for the zoom level
vars.put(&quot;TileColumnMin&quot;,r1);
// set tile row minimum value for the zoom level
vars.put(&quot;TileRowMin&quot;,r2);

// set tile column max value for the zoom level
var tileColumnMax=Number(6050);
vars.put(&quot;TileColumnMax&quot;,tileColumnMax);


// set tile row max value for the zoom level
var tileRowMax=Number(18225);
vars.put(&quot;TileRowMax&quot;,tileRowMax);



</stringProp>
            </BSFSampler>
            <hashTree/>
            <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="While Controller" enabled="true">
              <stringProp name="WhileController.condition">${__javaScript(${TileRow}&lt;=${TileRowMax})}</stringProp>
            </WhileController>
            <hashTree>
              <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="While Controller" enabled="true">
                <stringProp name="WhileController.condition">${__javaScript(${TileColumn}&lt;=${TileColumnMax})}</stringProp>
              </WhileController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Tile Request  for layer ${ZoomLayer} ${TileRow} ${TileColumn}" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="service" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">WMTS</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">service</stringProp>
                      </elementProp>
                      <elementProp name="request" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">GetTile</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">request</stringProp>
                      </elementProp>
                      <elementProp name="version" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">1.0.0</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">version</stringProp>
                      </elementProp>
                      <elementProp name="layer" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">Zoom+Map+Auto</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">layer</stringProp>
                      </elementProp>
                      <elementProp name="style" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">default</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">style</stringProp>
                      </elementProp>
                      <elementProp name="format" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">image/png</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">format</stringProp>
                      </elementProp>
                      <elementProp name="TileCol" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${TileColumn}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">TileCol</stringProp>
                      </elementProp>
                      <elementProp name="TileRow" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${TileRow}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">TileRow</stringProp>
                      </elementProp>
                      <elementProp name="TileMatrixSet" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">EPSG:27700</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">TileMatrixSet</stringProp>
                      </elementProp>
                      <elementProp name="TileMatrix" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">EPSG:27700:${ZoomLayer}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">TileMatrix</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">gwccluster2-env.elasticbeanstalk.com</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol">http</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/service/wmts?</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="Increment Tile Column" enabled="true">
                  <stringProp name="scriptLanguage">javascript</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">var c=Number(vars.get(&quot;TileColumn&quot;));
c=c+1;

vars.put(&quot;TileColumn&quot;,c);</stringProp>
                </BSFSampler>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="Set Tile Column to 0" enabled="true">
                <stringProp name="scriptLanguage">javascript</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">var r=Number(vars.get(&quot;TileColumnMin&quot;));

vars.put(&quot;TileColumn&quot;,r);</stringProp>
              </BSFSampler>
              <hashTree/>
              <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="Increment Tile Row" enabled="true">
                <stringProp name="scriptLanguage">javascript</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">var r=Number(vars.get(&quot;TileRow&quot;));
r=r+1;

vars.put(&quot;TileRow&quot;,r);</stringProp>
              </BSFSampler>
              <hashTree/>
            </hashTree>
            <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="Set Tile Row to 0" enabled="true">
              <stringProp name="scriptLanguage">javascript</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">var r=Number(vars.get(&quot;TileRowMin&quot;));
vars.put(&quot;TileRow&quot;,r);</stringProp>
            </BSFSampler>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If ZoomLayer=13" enabled="true">
            <stringProp name="IfController.condition">${ZoomLayer}==13</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="Initialise Tile Column &amp; Row  Min ,Max for zoom level 13" enabled="true">
              <stringProp name="scriptLanguage">javascript</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">//initialise TileColumn counter start value to be Tile Column minimum zoom level

var r1=Number(vars.get(&quot;TileColumn&quot;));
r1=19073;
vars.put(&quot;TileColumn&quot;,r1);
vars.put(&quot;TileColumnMin&quot;,r1);

//initialise TileRow counter start value to be Tile Row minimum zoom level

var r2=Number(vars.get(&quot;TileRow&quot;));
r2=44760;
vars.put(&quot;TileRow&quot;,r2);

// set tile column minimum value for the zoom level
vars.put(&quot;TileColumnMin&quot;,r1);
// set tile row minimum value for the zoom level
vars.put(&quot;TileRowMin&quot;,r2);

// set tile column max value for the zoom level
var tileColumnMax=Number(18480);
vars.put(&quot;TileColumnMax&quot;,tileColumnMax);


// set tile row max value for the zoom level
var tileRowMax=Number(44265);
vars.put(&quot;TileRowMax&quot;,tileRowMax);



</stringProp>
            </BSFSampler>
            <hashTree/>
            <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="While Controller" enabled="true">
              <stringProp name="WhileController.condition">${__javaScript(${TileRow}&lt;=${TileRowMax})}</stringProp>
            </WhileController>
            <hashTree>
              <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="While Controller" enabled="true">
                <stringProp name="WhileController.condition">${__javaScript(${TileColumn}&lt;=${TileColumnMax})}</stringProp>
              </WhileController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Tile Request  for layer ${ZoomLayer} ${TileRow} ${TileColumn}" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="service" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">WMTS</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">service</stringProp>
                      </elementProp>
                      <elementProp name="request" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">GetTile</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">request</stringProp>
                      </elementProp>
                      <elementProp name="version" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">1.0.0</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">version</stringProp>
                      </elementProp>
                      <elementProp name="layer" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">Zoom+Map+Auto</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">layer</stringProp>
                      </elementProp>
                      <elementProp name="style" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">default</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">style</stringProp>
                      </elementProp>
                      <elementProp name="format" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">image/png</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">format</stringProp>
                      </elementProp>
                      <elementProp name="TileCol" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${TileColumn}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">TileCol</stringProp>
                      </elementProp>
                      <elementProp name="TileRow" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${TileRow}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">TileRow</stringProp>
                      </elementProp>
                      <elementProp name="TileMatrixSet" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">EPSG:27700</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">TileMatrixSet</stringProp>
                      </elementProp>
                      <elementProp name="TileMatrix" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">EPSG:27700:${ZoomLayer}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">TileMatrix</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">gwccluster2-env.elasticbeanstalk.com</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol">http</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/service/wmts?</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="Increment Tile Column" enabled="true">
                  <stringProp name="scriptLanguage">javascript</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">var c=Number(vars.get(&quot;TileColumn&quot;));
c=c+1;

vars.put(&quot;TileColumn&quot;,c);</stringProp>
                </BSFSampler>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="Set Tile Column to 0" enabled="true">
                <stringProp name="scriptLanguage">javascript</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">var r=Number(vars.get(&quot;TileColumnMin&quot;));

vars.put(&quot;TileColumn&quot;,r);</stringProp>
              </BSFSampler>
              <hashTree/>
              <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="Increment Tile Row" enabled="true">
                <stringProp name="scriptLanguage">javascript</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">var r=Number(vars.get(&quot;TileRow&quot;));
r=r+1;

vars.put(&quot;TileRow&quot;,r);</stringProp>
              </BSFSampler>
              <hashTree/>
            </hashTree>
            <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="Set Tile Row to 0" enabled="true">
              <stringProp name="scriptLanguage">javascript</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">var r=Number(vars.get(&quot;TileRowMin&quot;));
vars.put(&quot;TileRow&quot;,r);</stringProp>
            </BSFSampler>
            <hashTree/>
          </hashTree>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <threadCounts>true</threadCounts>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
